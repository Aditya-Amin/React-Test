{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoContainer/TodoContext.js","components/TodoContainer/TodoContainer.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","item","deltodo","onClick","TodoContext","createContext","TodoProvider","props","useState","finalTodo","setFinalTodo","Provider","value","children","TodoContainer","singleTodo","setSingleTodo","useContext","delTodo","key","filterItems","filter","task","onSubmit","e","preventDefault","newTodo","id","Date","now","target","reset","placeholder","onChange","map","NavBar","className","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAWeA,EATE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACtB,OACA,4BACMD,EACF,4BAAQE,QAAU,kBAAMD,EAAQD,KAAhC,SCJKG,EAAcC,0BAGdC,EAAe,SAAAC,GAAU,IAAD,EACCC,mBAAS,IADV,mBAC1BC,EAD0B,KACfC,EADe,KAGjC,OACI,kBAACN,EAAYO,SAAb,CAAsBC,MAAQ,CAACH,EAAWC,IACpCH,EAAMM,WC2BLC,EAjCO,SAACP,GAAW,IAAD,EACOC,qBADP,mBACtBO,EADsB,KACVC,EADU,OAEKC,qBAAWb,GAFhB,mBAEtBK,EAFsB,KAEXC,EAFW,KAWvBQ,EAAU,SAAAC,GACZ,IAAMC,EAAcX,EAAUY,QAAQ,SAAApB,GAAI,OAAIA,EAAKqB,OAASH,KAC5DT,EAAaU,IAIjB,OACI,6BACI,0BAAMG,SAhBK,SAACC,GAChBA,EAAEC,iBACF,IAAIC,EAAO,sBAAOjB,GAAP,CAAkB,CAAEa,KAAMP,EAAYY,GAAIC,KAAKC,SAC1DnB,EAAagB,GACbF,EAAEM,OAAOC,UAaD,2BAAOC,YAAY,gBAAgBC,SAAW,SAAAT,GAAC,OAAIR,EAAcQ,EAAEM,OAAOlB,UAC1E,wCAGJ,4BAEQH,EAAUyB,KAAI,SAAAjC,GAAI,OAAI,kBAAC,EAAD,CAAUkB,IAAMlB,EAAK0B,GAAK1B,KAAOA,EAAKqB,KAAOpB,QAAUgB,UCdlFiB,G,MAZA,WAAO,IAAD,EACiBlB,qBAAWb,GAD5B,mBACVK,EADU,UAGjB,OACI,4BAAQ2B,UAAU,cACd,0BAAMA,UAAU,cAAe3B,EAAU4B,WCStCC,MAZf,WAEE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2bd486cf.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodoItem = ({ item, deltodo }) => {\n    return (\n    <li> \n        { item }\n        <button onClick={ () => deltodo(item) }>Del</button>\n    </li>\n    );\n};\n\nexport default TodoItem;","import React, { useState, createContext } from 'react';\n\nexport const TodoContext = createContext();\n\n\nexport const TodoProvider = props => {\n    const [finalTodo, setFinalTodo] = useState([]);\n\n    return (\n        <TodoContext.Provider value={ [finalTodo, setFinalTodo] }>\n            { props.children }\n        </TodoContext.Provider>\n    );\n}","import React, { useContext, useState } from 'react';\nimport TodoItem from '../TodoItem/TodoItem';\nimport { TodoContext } from './TodoContext';\n\nconst TodoContainer = (props) => {\n    const [singleTodo, setSingleTodo] = useState()\n    const [finalTodo, setFinalTodo] = useContext(TodoContext)\n    const handleTodo = (e) => {\n        e.preventDefault();\n        let newTodo = [...finalTodo, { task: singleTodo, id: Date.now() }];\n        setFinalTodo(newTodo);\n        e.target.reset();\n    }\n\n\n    const delTodo = key => {\n        const filterItems = finalTodo.filter( item => item.task !== key);\n        setFinalTodo(filterItems);\n    }\n\n\n    return (\n        <div>\n            <form onSubmit={ handleTodo }>\n                <input placeholder=\"Add a todo...\" onChange={ e => setSingleTodo(e.target.value) }/>\n                <button>Add</button>\n            </form>\n\n            <ul>\n                {\n                    finalTodo.map(item => <TodoItem key={ item.id } item={ item.task } deltodo={ delTodo } />)\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoContainer;","import React, { useContext } from 'react';\nimport './NavBar.css';\nimport { TodoContext } from './TodoContainer/TodoContext';\n\nconst NavBar = () => {\n    const [finalTodo, setFinalTodo] = useContext(TodoContext);\n\n    return (\n        <header className=\"nav-header\">\n            <span className=\"todo-count\">{ finalTodo.length }</span>\n        </header>\n    );\n}\n\n\n\nexport default NavBar;","import React, { useState } from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer/TodoContainer';\nimport NavBar from './components/NavBar';\nimport { TodoProvider } from './components/TodoContainer/TodoContext';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <TodoProvider>\n        <NavBar/>\n        <TodoContainer/>\n      </TodoProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}